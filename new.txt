CONFIG_SERVER: add exceptions

в колонке Готово

Участники Уведомления
e ЯР © Подписаться
Описание Изменить

В leantech-common в подпроекте domain есть исключения в пакете exceptions.
Необходимо добавить в БД config-server исключения, которые описаны в нем.
config-server в БД содержит ключи и описания ошибок на разных языках.

Необходимо добавить эти данные через миграции БД для всех исключений.

Spring WebFlux Kickstarter project

в колонке Готово

Участники Уведомления
e oP © Подписаться
Описание Изменить

Разработка Реактивного Веб-Приложения с использованием Spring WebFlux и
Apache Kafka. Цель: Углубить знания и навыки в современных технологиях
программирования, в том числе Java 21, Spring WebFlux, Spring Reactive Data,
Apache Kafka, Flyway, и Docker. Задача: Создание веб-приложения, способного
эффективно обрабатывать и управлять асинхронными потоками данных с
использованием реактивных паттернов.
== Описание Изменить

Необходимо реализовать микросервис, который отвечает за работу с
нотификациями.

Функционал:

® Получение нотификаций через RabbitMQ и сохранение их в БД
® Отправка email при регистрации пользователям
® Получение нотификаций для пользователя

® Изменение статуса нотификаций
Technology stack:

* Java 21

Spring WebFlux

* Spring Reactive Data

Postgres

© Flyway
TestContainers
© Junit5

® Mockito

® Docker

Все ОТО должны быть добавлены в leantech-common и импортированы в
проект как зависимость.

Таблица notifications

1 create table notifications.notifications

2 (
3 id serial
4 primary key,
5 created_at timestamp default пом() not null,
6 modified at timestamp,
7 expiration date timestamp not null,
8 message text not null,
9 error text,
10 user uid varchar (36),
11 notification_status varchar (32),
12 message type warchar (32),
13 trigger code warchar (128),
14 object_type warchar (255),
15 object_id varchar (36),
16 subject varchar (128),
17 created Бу warchar (255),
18 Ваз confirm otp boolean default false,
19 suggest_to_add_to_trusted boolean default true,
20 constraint notification _user uid status_type trigger code i
21 unique (object_id, notification status, message type, t
22 );
ae)

24 create index notifications user uid trigger code object_id obje

25 on notifications.notifications (user_uid, trigger_code, obj
== Описание Изменить

Необходимо реализовать функционал ОТР в notifications-service, который
позволит пользователю запросить ОТР и ввести код вторым запросом:

Запрос ОТР:
POST: /vi/internal/otp/send

DTO 3anpoca:

OtpSendRequestDto

1 @Data

2 @Builder

3 @NoArgsConstructor

4 @AllArgsConstructor

5 @Jsoninclude (JsonInclude. Include -NON_NULL)

6 @Schema(description = "Request to generate and send SMS code to
7 public class OtpSendRequestDto {

8 @Schema (description = "email",
Описание

Необходимо реализовать функционал ОТР в notifications-service, который
позволит пользователю запросить ОТР и ввести код вторым запросом:

Запрос ОТР:
POST: /vi/internal/otp/send

DTO 3anpoca:

OtpSendRequestDto
1 Data
2 @Builder
3 @NoArgsConstructor
4 @AllArgsConstructor
5 @JsonInclude (Jsoninclude. Include .NON_NULL)
6 @Schema (description = "Request to generate and send SMS code to
7 public class OtpSendRequestDto {
8 @Schema (description = "email",
9 example = "test@test.com")
10 private String email;
11
12 @Schema (description = "OTP unique identifier",
13 example = "e9ec8147-62de—-466e-80b0-b34d0cf87abi"
14 @JsonProperty ("огр ата")
15 private String uuid;
16
17 @Schema (description = "SMS text template", example = "Verif
18 @JsonProperty ("message_template”)
19 private String messageTemplate;
20
21 @Schema (description = "SMS subject text", example = "Your p
22 @JsonProperty ("message subject")
23 private String subject;
24
2S) @schema (description = "User's uid", example = "е9ес8147-62а
26 @JsonProperty ("user uid")
27 private String userUid;
28
29 @schema (description = "Otp destination dto", requiredMode
30 @JsonProperty ("destination_dto")
31 private OtpDestinationDto destination;
Be
58 @5свема (description = "Settings for generating and sending
34 @JsonProperty ("огр details")
35 private OtpDetailsRequestDto otpDetails;
36
37) @Schema (description = "OTP message language", requiredMode
38 @JsonProperty ("language")
39 private String language;

40

Изменить
ОТО ответа:

OtpSendResponseDto

1 @Data

2 @Builder

3 @NoArgsConstructor

4 @Al1ArgsConstructor

5 @Schema(description = "Otp send response Ао")
6 @JsonIgnoreProperties (ignoreUnknown = true)

7 @dJsonInclude (JsonInclude. Include .NON_NULL)

8 public class OtpSendResponseDto {

9 @Schema (description = "email",
10 example = “test@test.com")
11 private String email;
12 @Schema (
13 description = "OTP unique identifier for confirmati
14 example = "e9ec8147-62de-466e-80b0-b34d0cf87abi"
15 )
16 @JsonProperty ("otp_uid")
17 private String uuid;
18
19 @Schema (description = "OTP code", example = "125496")
20 @JsonProperty("otp_ code")
21 private String otpCode;
22
23 @Schema (description = "Otp details"
24 @JsonProperty("otp_details")
25 private OtpDetailsRequestDto otpDetails;
26
27 @schema (description = "Settings for generating and sending
28 @JsonProperty ("destination_dto")
29 private OtpDestinationDto otpDestinationDto;

30 }
OtpDetailsRequestDto

1 @Data
2 @Builder
3 @NoArgsConstructor
4 @Al11ArgsConstructor
5 @JsoniInclude (JsonInclude.Include.NON_NULL)
6 @Schema (description = "Settings for generating and sending SMS
7 public class OtpDetailsRequestDto {
8
9 @schema (description = "SMS code length", example = "4",
10 @JsonProperty ("length")
11 private Integer length;
12
13 @Schema (description = "Time, storing SMS code (in seconds)"
14 @JsonProperty ("ttl")
15 private Integer ttl;
16
17 @schema (description = "Number of attempts to enter SMS code
18 @JsonProperty ("attempts")
19 private Integer attempts;
20
21 @Schema (description = "Time to resend SMS code (in seconds)
22 @JsonProperty ("delay")
23 private Integer delay;
24
25 @schema (description = "Parameter forcing to generate and se
26 @JsonProperty ("force")
27 private Boolean force;
28 }
OtpDestinationDto
1 @Data
2 @Builder
3 @NoArgsConstructor
4 @Al1ArgsConstructor
5 G@EqualsAndHashCode
6 public final class OtpDestinationDto {
7 @JsonProperty ("destination")
8 private String destination;
9 @JsonProperty("otp_ type")
10 private OtpType otpType;

11
Проверка запроса

POST /vi/internal/otp/check
DTO 3anpoca

1 @Data

2 @Builder

3 @NoArgsConstructor
4 @AllArgsConstructor

5 public class OtpCheckRequestDto {

6

7 @NotBlank

8 @JsonProperty ("otp_uid")

9 private String otpUid;
10
11 @NotBlank
12 @JsonProperty ("otp_code")
13 private String otpCode;
14
15 @JsonProperty ("destination dto")
16 private OtpDestinationDto destinationDto;
17 }

1 @Data

2 @Builder

3 @NoArgsConstructor
4 @AllArgsConstructor
5 @EqualsAndHashCode

6 public final class OtpDestinationDto {

7 @JsonProperty ("destination")
8 private String destination;
Е @JsonProperty("otp_type")
10 private OtpType otpType;
11 }
ОТО ответа:
1 @Data

2 @Builder
3 @NoArgsConstructor
4 @AllArgsConstructor

5 public class OtpCheckResponseDto {

6 @JsonProperty ("attempts")
7 private Long attempts;

8 @JsonProperty ("valid")

9 private boolean valid;
10 }

Допускается не более 5 попыток проверки.
SPS-120: TRANSFER QR CODE

в колонке Готово

Участники Уведомления
e + © Подписаться
Описание Изменить

Мы должны реализовать возможность для пользователя сгенерировать QR
код, при переходе на который другой пользователь сможет получить все
данные для трансфера.

В деталях должны быть параметры:

1. Получатель
2. Сумма

3. Валюта

CURRENCY-EXCHANGE-SERVICE

в колонке Готово

Участники Уведомления
о oP © Подписаться
Описание Изменить

currency-exchange.sql

Необходимо реализовать сервис, который запрашивает у провайдера курсов
данные для всех пар валют.

Мы должны вычитать ВСЕ валюты, которые есть в системе и сгенерировать
все пары

Например, в системе, есть 3 валюты

RUB

USD

EUR

Пары:

RUB/USD
USD/RUB
RUB/EUR
EUR/RUB
USD/EUR
EUR/USD

Все данные должны сохраняться в БД (схема данных в закрепленном файле).
Запуск задачи должен быть реализован с использованием Shedlock.
SPS-108: реализовать подсчет комиссий

в колонке Готово

Участники Уведомления
о ate © Подписаться
Описание Изменить

Необходимо реализовать логика подсчета комиссий.
Примеры записей в таблице individuals _fee.

При создании транзакции нам необходимо взять комисиию для данного
случая на основании критериев и заполнить поля ОТО.

В таблицу с транзакциями должны отдельно быть записаны комиссии, сумма
NET и сумма GROSS.
SPS-107: экспорт истории транзакций

в колонке Готово

Участники Уведомления
Е aa © Подписаться
Описание

Необходимо реализовать логику экспорта истории транзакций.

Форматы:

® excel

® csv
Способы экспорта:

» скачать файл

© отправить файл Ha email
Тело запроса для скачивания:

1 curl -Х "'РОЗТ' \

2 "рттрз://нозт/у1/ткапзаст1от$/ехрогт/ехсе1' \
3 —Н ‘accept: */*' \

4 -H "Content-Type: application/json' \

5 —а "{

6 "wallet_uid": [

7 "3fa85f64-5717-4562-b3fic-2c963f66afa6"
8 1,

9 "start date": "2023-12-25T14:34:12.5832",
10 "end date": "2023-12-25T14:34:12.5832",
11 "operation_type": [

12 "TOP UP",

3 "WITHDRAWAL",

14 "TRANS FER_IN" о

15 "ТВАМЗЕЕВ_ОПТ"

16 1,

17 "status": [

18 "CREATED"

19 J

20 }'

Изменить
Тело ответа:

Ответом должна быть одноразовая публичная ссылка на файл, который
ранится во внутреннем файловом хранилище.

Тело запроса на отправку файла через email:

Необходимо продумать весь сценарий с учетом хранения и деплоймента.
SPS-123: WEBHOOK SETTINGS

в колонке Готово

Участники Уведомления
e ЯР © Подписаться
Описание Изменить

Нам необходимо реализовать возможность для мерчанта создавать
настройки вебхуков для регистрации пользователя мерчанта.

Сценарий:

Мерчант создает настройки вебхуков:

- URL

- Тип метода (POST, PUT)

- Триггер: регистрация нового пользователя

При срабатывании триггера мы отправляем мерчанту на указанный URL
вебхук с деталями нового merchant_member

Мы должны предоставить возможность отправить тестовый вебхук.
WALLETS-SERVICE

в колонке Готово

Участники Уведомления
© ate © Подписаться
Описание Изменить

Необходимо реализовать микросервис, который отвечает за работу с
кошельками, транзакциями, комиссиями и т.д.

Функционал:

® Создание, получение платежных запросов, транзакций ит.д.
© Создание и изменение кошельков.

© Создание и изменение типов кошельков.
Technology stack:

* Java 21

® Spring WebFlux

® Spring Reactive Data
« Postgres

© Flyway

® TestContainers

® Junit 5

® Mockito

® Docker

Все ОТО должны быть добавлены в leantech-common и импортированы в
проект как зависимость.

DDL БД в прикрепленном файле.
EJ} WEBHOOK-SERVICE

в колонке Готово

Участники Уведомления
ee sp © Подписаться
== Описание Изменить

Необходимо реализовать микросервис, который отвечает за работу с
вебхуками.

Функционал:

® Получение вебхуков
® Сохранение в БД (на данный момент, все хуки сохраняются в таблицу

unknown_callbacks)
Technology stack:

e Java 21

© Spring WebFlux

® Spring Reactive Data
e Postgres

© Flyway

® TestContainers

® Junit 5

® Mockito

® Docker

Все ОТО должны быть добавлены в leantech-common и импортированы в
проект как зависимость.

Е FAKE PROVIDER

в колонке Готово

Участники Уведомления

в? ры © Подписаться

Описание Изменить

Необходимо реализовать отдельный сервис, который реализует функционал,
описанный в прикрепленном файле.
SPS-106: история транзакций

в колонке Готово

Участники Уведомления
e я © Подписаться
Описание Изменить

Необходимо реализовать API, который позволяет пользователю
просматривать историю транзакций.

1 curl -Х 'POST' \

2 "https: //HOST/v1/transactions/history' \
3 -H ‘accept: */*' \

4 —Н 'Content-Type: application/json' \

5 —а '{

6 "wallet_uid": [

7 "3fa85f64-5717-4562-b3fc—2c963f66afa6"
8 1,

В "start date": "2023-12-25T14:29:58.8744",
10 mend date": "2023-12-25T14:29:58.8742",
11 "operation_type": [

12 "ТОР ПР",

13 "WITHDRAWAL",

14 "TRANSFER_IN",

15 "TRANSFER ОПТ"

16 1,

17 "status": [

18 "CREATED"

19 1

20 "раде": 0,

21 "limit": 100

22 }"

Пример тела ответа:

В {

2 "data": [

3 {

4 "refundFee"™: 0,

5 "transaction id": "3fa85£64-5717-4562-b3fc-2c963f66afa6",
6 "date time": "2023-12-25T14:31:12.0852",
7 "amount": 0,

8 "fees": 0,

9 "currency": "string",

10 "status": "CREATED",

11 "transaction type": "TOP UP",

12 "wallet_name": "string"

13 }

14 1,
12 “wallet_name": "string"

13) }

14 1,

15 "paging": {

16 "size": 0,

17 "totalElements": 0,
18 "totalPages"™: 0,
19 "number": 0

20 }

21 }

Публичный ендпоинт должен быть B individuals-api.
Логика получения транзакций - в wallets-service, обращение к которому
должно быть реализовано через wallets-client.

GJ SPS-109: реализовать wallets-client

в колонке Готово

Участники Уведомления

в a © Подписаться

Описание

Добавить более подробное описание...
SPS-102: change password

в колонке Готово

Участники Уведомления
о + © Подписаться
Описание Изменить

Необходимо реализовать логику изменения пароля.

Запрос:
1 curl 'https://HOST/vl1/auth/change-password'" \
2 -H ‘accept: */*' \
3 -H 'content-type: application/json' \
4 -H 'profiletype: INDIVIDUAL" \
5 -H '"profileuid: <UUID>"' \
6 --data-raw $"{\n "currentPassword": "j$O0s_<N5Nsséce\\"L%I | Fm&
7 —-compressed

В результате выполнения пользователь получает ОТР Ha email.

Подтверждение:
1 curl 'https://HOST/v1/auth/change-password/verify' \
2 -H ‘accept: */*' \
3 -H 'content-type: application/json' \
4 --data-raw $"{\n "email": "test@test.com",\n "otp_ code": "12
5 —-compressed

Ответы и логику обработки необходимо реализовать с учетом безопасности
аккаунта.
GJ SPS-101: change email functionality.

в колонке Готово

Участники Уведомления

в + © Подписаться

Описание Изменить

Необходимо реализовать функционал смены email.
Флоу:

initiate

1 curl "https://sost/vil/auth/change-email/initiate' \

2 -H ‘accept: */*' \
3 -H 'content-type: application/json' \
4 --data-raw $'{\п "email": "example@mail.com",\n "обр type":
5 —-compressed
confirm:

1 curl 'https://HOST/v1/auth/change-email/confirm' \

2 -H ‘accept: */*' \

3 -H 'content-type: application/json" \

4 --data-raw $'{\п "обр uid": "00000000-0000-0005-0000-00000000
5 --compressed

Изначальный запрос идет в individuals-api и далее идет взаимодействие с
person-service и KeyCloak.

c= Действия Показать подробности

s Напишите комментарий...
р

Е

SPS-103: forgot password

в колонке Готово

Участники Уведомления
e ЯР © Подписаться
Описание Изменить

Необходимо реализовать логику сброса забытого пароля.

Запрос:

1 curl 'https://HosT/v1/auth/forgot—password/request' \

2 -H ‘accept: */*' \

3 —Н 'content-type: application/json' \

4 --data-raw $'{\n “email": "string",\n "phone last digits": "
5 -—-compressed

В результате пользователь получает ОТР и ссылку для сброса пароля
(change_password_token)

При переходе по ссылке пользователь вводит OTP и новый пароль

Запрос:

1 curl 'https://HOST/v1/auth/forgot—password/verify/ {CHANGE PASSWO

2 —Н ‘accept: */*' \

3 -H 'content-type: application/json' \

4 --data-raw $'{\n "email": "test@test.com",\n "otp_ code": "12
5 —-compressed

Необходимо реализовать логику с учетом безопасности аккаунта.

SPS-111: block user functionality

в колонке Готово

Участники Уведомления
$ + © Подписаться
Описание Изменить

Нам необходимо реализовать логику блокировки пользователя.

При блокировке должен быть изменен статус Ha BLOCKED_BY_ADMIN.
Все кошельки должны перейти в состояние BLOCKED BY SYSTEM.

Все транзакции, переводы и т.д. должны быть запрещены.

При этом логин и получения данных пользователем о себе - должны быть
доступны.
SPS-110: project documentation

в колонке Готово

Участники Уведомления
e == © Подписаться
Описание Изм,

Нам необходимо сделать диаграмму с описанием проекта.
При создании опираться необходимо на С4 модель:
@ The C4 model for visualising software architecture

Необходи мо показать взаимосвязи всем модулей и сторонних систем.

Ожидаемые диаграммы:

* System Context diagram

* Container diagram

® Component diagram

* Code diagram

® System Landscape diagram
» Dynamic diagram

® Deployment diagram
SPS-116: FAKE KYC SERVICE

в колонке Готово

Участники Уведомления
$ ЯР < Подписаться
Описание

Изменить

Необходимо реализовать сервис, который принимает данные пользователя
при регистрации.

В результате обработки данных, сервис должен вернуть статус верификации:

e VERIFIED
e REJECTED

Teno 3anpoca:

1

10

11

12

curl

—Х POST \

"https://HOST/applicants' \

—Н

-d

"Content-Type: application/json' \
"{
"externalUserId": "someUniqueUserId",
"email": "john.smith@sumsub.com",
"phone": "+449112081223",
"fixediInfo": {
"country": "GBR",

"placeOfBirth": "London"

Тело ответа:

10

11

12

13)

14

15

"id": "UUID", //арр11сапета

"createdAt": "ххх",
"clientId": "SumsubClient",
"inspectionId": "UUID",

"externalUserId": "someUniqueUserId",
"fixedInfo": {
"placeOfBirth": "London",
"country": "GBR"
},
"email": "john.smith@mail.com",
"phone": "+449112081223",
"requiredIdDocs": {
"excludedCountries": [

"PRE"
17

18

19

20

21

22

2

24

2S

27

28

29

30

31

32

33

34

35

37

38

ay

40

41

42

"docSets": [
{
"idDocSetType": "IDENTITY",
"types": [
"PASSPORT",
"DRIVERS",
"ID CARD",

"RESIDENCE PERMIT"

"i1dDocSetType": "SELFIE",

"types": [
"SELFIE"
1,
"у1АеоВеаи1геЯ": "disabled"
}
]

},

"review": {
"reprocessing": false,
"createDate": "XXX",
"reviewStatus": "init"

},

"type": "individual"

Сервис должен присваивать статус (псевдослучайно) и отправлять колбеки на
указанный адрес.

Пример колбека (REJECT)

10

11

12

13

14

5

17

18

19

"арр11савета": "UUID",
"inspectionId": "UUID",
"correlationiId": "UUID",
"externalUseriId": "UUID",

"levelName": "basic",

"type": "applicantReviewed",

"reviewResult": {
"moderationComment": "Пожалуйста, укажите ваши имя и фамили
"clientComment": "The full name on the profile is either mi
"reviewAnswer": "RED",
"rejectLabels": [

"PROBLEMATIC APPLICANT DATA"
1,
"reviewRejectType": "RETRY"
},
"reviewStatus": "completed",
"createdAt": "ххх",

"createdAtMs": "ххх",
19 "createdAtMs": "ххх",

23 "“webhookType": "APPLICANT VERIFICATION"

20 "clientId": "UUID",

21 "sandboxMode": false,

22 "applicantType": "individual",
24 }

Пример колбека (SUCCESS):

1 {

2 "applicantId": "UUID",

3 "inspectionId": "UUID",

4 "correlationId": "UUID",

5 "externalUserId": "UUID",

6 "levelName": "basic-level",

7 "type": "applicantReviewed"”,
8 "reviewResult™: {

9 "reviewAnswer": "GREEN"

10 lis

11 "геу1ем5таеиз": "сошр1ефеа",
a2 "createdAt": "ххх",

13 "createdAtMs": "ххх",

14 "clientId": "UUID",

15 "sandboxMode": false,

16 "applicantType": "individual",
17 "webhookType": "APPLICANT VERIFICATION"
18 }

SPS-114: IMPROVE SWAGGER FOR PERSONS_SERVICE

в колонке Готово

Участники Уведомления
о + © Подписаться
Описание

Изменить

Необходимо проверить работу SWAGGER в PERSONS-SERVICE и добавить

детальное описание ендпоинтов.

Все ОТО должны иметь детальное описание полей и правила их валидации.
SPS-104: configure swagger for individuals-api and make it accessible.

в колонке Готово

Рекоме ндуемые

Участники Уведомления
>) + © Подписаться & Присоедини1
Добавить на карточк
Описание & Участники
Добавить более подробное описание... © Метки

[й Чек-лист

SPS-109: transaction webhook handling

в колонке Готово

Участники Уведомления
в’ + © Подписаться
Описание Изменить

Необходимо реализовать функционал, который при получении колбека от
провайдера платежей будет изменять статус транзакции.

В случае успеха - необходимо подтвердить транзакцию и изменить балансы
кошелька(кошельков)

В случае ошибки транзакции на вывод - необходимо изменить баланс
кошелька.

SPS-112: REFUND TRANSACTIONS

в колонке Готово

Участники Уведомления
э + © Подписаться
Описание Изменить

Нам необходимо реализовать функционал REFUND транзакций.

Логика работы:

® при создании транзакции REFUND у пользователя должен быть пополнен

баланс.

e REFUND создается на основании TRANSFER_OUT или TOP_UP транзакции
SPS-117: PAYMENT WEBHOOKS

в колонке Готово

Участники Уведомления
в” + © Подписаться
Описание Изменить

Нам необходимо реализовать логику обработки колбека от KAE PAYMENT
PROVIDER таким образом, чтобы при получении сообщения мы вызывали
wallets-service и инициировали изменения баланса.

Пример:

TOP_UP - FAILED
Помечаем транзакцию, которая связана с текущим платежным запросом на
FAILED и не производим пополнение баланса.

TOP_UP - SUCCESS
Помечаем транзакцию, которая связана с текущим платежным запросом Ha
COMPLETED и производим пополнение баланса на сумму транзакции.

TOP_UP - IN PROGRESS

Не производим изменений

WITHDRAWAL - FAILED
Помечаем транзакцию, которая связана с текущим платежным запросом Ha
FAILED и производим возврат суммы транзакции на баланс.

WITHDRAWAL - SUCCESS
Помечаем транзакцию, которая связана с текущим платежным запросом на
COMPLETED.

WITHDRAWAL - IN PROGRESS

Не производим изменений
SPS-119: RECENT TRANSACTIONS

в колонке Готово

Участники Уведомления
о + © Подписаться
Описание Изменить

Мы должны реализовать возможность отображения недавних транзакци i.

Когда пользователь делает перевод другому пользователю мы должны
предлагать ему варианты получателей.

Для нас недавние транзакции - ПОСЛЕДНИЕ 10 операций.
SPS-105: create payment-service и payments-client

в колонке Готово

Участники Уведомления
о ale © Подписаться
Описание Изменить

Необходимо реализовать payments-service, который позволяет возвращать
доступные payment методы для клиентов по их:

® стране
® валюте кошелька
e ID

Этот сервис должен быть интегрирован с FAKE PROVIDER и проводить
платежи клиентов.

В будущем, individuals ар! будет вызывать этот сервис.

DDL в прикрекленном daiine.payments.sql

При мер запроса для получения платежных методов:

Запрос

1 eurl -Х 'GET' \

2 "https://HOST/v1/transactions/payment—-methods/{walletuid}' \
3 -H ‘accept: */*'
Ответ:
1 ot
2 {
3 "id": "string",
4 "name": "CARD",
5 "provider method type": "PAYMENT METHOD",
6 "image url": "string",
7 "required fields": [
8 {
9 "description": "string",
10 "placeholder": "string",
11 "representationName": "string",
12 "language": "string",
13 "uid": "77с69373-Е7ае-4695-9Е50-90721Е998465",
14 "created at": "2023-12-27T06:34:02.0032",
15 "modified_at": "2023-12-27T06:34:02.0032",
16 "payment method id": 777,
17 "payment type": "TOP_UP",
18 "country alpha3_ code": "BRA",
19 "name": "First name",
20 "data_type": "string",
21 "validation_type": "regexp",

22 "validation rule": "^ГА-70-9. %+-1+@ГА-70-9_-1+\\ _ ГА-Я1
22 "yalidation rule": "^[А-20-9. %+-]+@[A-Z0-9.-]+\\. [А-2]

23 "default_value": "Bank of Brazil",
24 "payment method": "string",
25 "values options": [
26 "string"™
27 ]
28 }
29 ]
30 }
31 |]
EJ $Р5$-113: IMPROVE SWAGGER FOR WALLETS_SERVICE

в колонке Готово

Участники Уведомления
о + © Подписаться
Описание Изменить

Необходимо проверить работу SWAGGER в WALLETS-SERVICE и добавить
детальное описание ендпоинтов.

Все ОТО должны иметь детальное описание полей и правила их валидации.

SPS-118: SECURITY RULES

в колонке Готово

Участники Уведомления

a + © Подписаться

Описание Изменить

Нам необходимо реализовать функционал правил безопасности.
Правила будут гибкими.

На текущий момент их будет 2.

1. Первый WITHDRAWAL должен попадать на рассмотрение и подтверждаться
вручную. После подтверждения модератором транзакция проходит и все
последующие выводы проходят автоматически.

2. Мы должны иметь возможность установить лимит на максимальную сумму
в транзакция для конкретной валюты и типа операции (пополнение,
трансфер, вывод).

Данный функционал должен быть реализован на уровне wallets-service.
ч

GJ SPS-115: FROZEN TRANSACTIONS
в колонке Готово
Участники Уведомления
о + © Подписаться

== Описание Изменить
Необходимо реализовать механизм замороженных транзакций.
Если транзакция отмечается, как замороженная, сумма этой транзакции
недоступна на балансе пользователя.
При подсчете баланса кошелька - сумма транзакции вычитается из общего
баланса.
Детали модели данных можно найти в таблице frozen_transactions.

GJ SPS-124: GOOGLE AUTH

в колонке Готово

Участники Уведомления

a + © Подписаться

Описание Изменить

Нам необходимо добавить возможность регистрации и авторизации
INDIVIDUAL через Google. При этом записи должны появиться как в KeyCloak,
так и в БД.
SPS-121: MERCHANT API

в колонке Готово

Участники Уведомления
© oP © Подписаться
Описание Изменить

Нам необходимо реализовать АПИ для портала мерчанта.

В качестве первого функционала необходим АПИ для:

® логина мерчанта (новый realm в KeyCloak)
® возможности приглашения членов команды (генерация invite-token)

Пример запроса:

1 curl 'https://merchant-api/vi/merchants/members/invitation' \
2 --data-raw '{"first_name":"John","last_name": "Doe", "email":

3 --compressed

После отправки приглашения, сотрудник должен получить email со ссылкой.
После перехода по ссылке сотрудник должен ввести пароль, в результате чего
будет создан новый пользователь в системе. Данные по мерчанту и
сотрудникам должны храниться в person-service.

Доступные роли:
- ADMIN

- MODERATOR

- TECH_EXPERT

SPS-130: BACK OFFICE TRANSACTIONS MANAGEMENT

в колонке Готово

Участники Уведомления
e at © Подписаться
Описание Изменить

В рамках BACK OFFICE нам необходимо реализовать функционал, который
позволяет видеть все транзакции всех пользователей и мерчантов, все
данные по этим транзакциям.

Администратор должен иметь возможность изменения статуса транзакции с
соответствущим изменением баланса.
SPS-122: BACK-OFFICE API

в колонке Готово

Участники Уведомления
s + © Подписаться
Описание Изменить

Нам необходимо реализовать АПИ для портала бэк-офиса.

В качестве первого функционала необходим АПИ для:

® логина сотрудника (новый realm в KeyCloak)
© возможности приглашения членов команды (генерация invite-token)

Пример запроса:

1 curl ‘https://backoffice-api/vl/members/invitation' \
2 --data-raw '{"first_name":"John","last_name": "Doe", "email":

3 --compressed

Nocne отправки приглашения, сотрудник должен получить email со ссылкой.
После перехода по ссылке сотрудник должен ввести пароль, в результате чего
будет создан новый пользователь в системе. Данные по сотрудника должны
храниться в person-service.

Доступные роли:

® ADMIN
® MODERATOR
e FINOPS

SPS-129: BACK OFFICE USER MANAGEMENT

в колонке Готово

Участники Уведомления
$ + © Подписаться
Описание Измени`

В рамках BACK OFFICE нам необходимо реализовать функционал, который
позволяет видеть всех:

© индивидуалов

* мерчантов

Дает возможность блокировать их
SPS-128: AUTH YANDEX

в колонке Готово

Участники Уведомления

e + © Подписаться

Описание Изменить

Нам необходимо добавить возможность регистрации и авторизации
INDIVIDUAL через Yandex. При этом записи должны появиться как в KeyCloak,
так и в БД.

ч

SPS-125: GDPR FUNCITONALITY

в колонке Готово

Участники Уведомления

(©) + © Подписаться

Описание Изменить

По запросу пользователя мы должны полностью удалить его личные данные
из системы. При этом, данные по транзакциям должны сохраниться.

GDPR невозможен в ситуации, когда баланс INDIVIDUAL не нулевой.

SPS-131: WEBHOOKS MANAGEMENT

в колонке Готово

Участники Уведомления
о + © Подписаться
Описание Изменить

ЛОГИКА РЕГИСТРАЦИИ MERCAHNT MEMBER
Нам необходимо реализовать АПИ для портала мерчант-офиса.

После отправки приглашения, сотрудник (мерчант мембер) должен получить
email со ссылкой. После перехода по ссылке сотрудник должен ввести пароль,
в результате чего будет создан новый пользователь в системе.

После успешного завершения регистрации мы должны отпавить webhook
мерчанту о данном событии на URL, указанный в webhook settings для этой
ситуации.

Данные по сотрудникам должны храниться в person-service.

В рамках BACK OFFICE нам необходимо реализовать функционал, который
позволяет видеть все вебхуки всех мерчантов (регистрация мемберов)

Администратор должен иметь возможность переотправки вебхука.
SPS-126: EVENT SCHEDULING

в колонке Готово

Участники Уведомления

э SF < Подписаться

Описание Изменить

Данные по воркспейсу:

Запрос:

1 curl 'https:HOST/v1/scheduling/<WORKSPACE NAME>/<EVENT NAME>"

Пример ответа:

1 curl 'https:HOST/v1/scheduling/<WORKSPACE NAME>/<EVENT_NAME>'

2
3
4 {
5 "workspaceSlug": "<WORKSPACE NAME>",
6 "schedulingPage™: {
7 "name": "Scheduling Page 1",
8 "slug": "<WORKSPACE NAME>",
9 "ие1сошемез5аае": "",
10 "isRoot": true
11 ls
12 "whiteLabel™: {
43. "iconUrl": "",
14 "highlightColor": ™"
15 },
16 "timeslots": [
17 {
18 "id": "UUID",
19 "title": "TITLE",
20 "type": 1,
21 "slug": "МАМЕ",
22 "isReauthRequired": null,
23 "description": "<p>DESCRIPTION.</p>",
24 "durations": [
25 20
26 1,
27 "timezone": "Europe/Istanbul",
28 "locations": [
29 {
30 "phoneNumber": "",
sil "meetingLink": "XXX",
32 "meetingPin": "",
33 "instructions": "",

34 "type": 1
34 “types l +

35 }

36 1,

37 "rangeType": 2,

38 "startTime": 0,

39 "endTime": 0,

40 "dailyLimit": 0,

41 "defaultLocationType": 0,

42 "defaultCustomLocation": "",
43 "daywiseEventCount": [],

44 "attendeeLimit": 10,

45 "schedulerLimit": 0,

46 "showRemainingSpots": false,
47 "defaultCalendarId": "<САТЕМРАВ _ЕМАТТ",
48 "isPhoneNumberNeeded": false,
49 "customQuestions": {

50 "addGuests": false,

51 "questions": null

52 },

53 "collectPayments": {

54 "paymentType": 0,

55 "amountToCollect"™: null,
56 "currency": null,

57 "paymentTerms™: ""

58 },

59 "stripeAccountKey"™: null,

60 "confirmationPage™: {

61 "type™: "customLink",

62 "redirectPage™: "",

63 "customLinks": []

64 },

65 "isPrivate": false,

66 "blockedSchedulers": [],

67 "disableConflictDetection": false,
68 "color": "#AEDA62"

69 }

70 1,

71 "meetingPolls": []

72 }

Доступные слоты:

Запрос:

1 curl 'https://HosT/vl/availabilities/UUID?duration=20étimestamp=
Пример ответа:

SPS-132: GOOGLE CALENDAR INTEGRATION

в колонке Готово

Участники Уведомления
e ar © Подписаться
Описание Изменить

При создании ивента, нам необходимо отправить приглашение в календарь
отправителю и гостю (гостям) события.

Ожидаемое поведение:
Создатель события и гость (гости) получают приглашение в календарь, в
котором будет MEETING ИМК.

SPS-133: ADD CALENDAR

в колонке Готово

Участники Уведомления
Ф + © Подписаться
Описание Изменить

Нам необходимо реализовать ендпоинты для добавления календарей к
воркеспейсу.

Вариант использования:

1. Создатель шаблона добавляет календарь к воркспейсу(боодЕ, etc.)
2. При создании шаблона ивента мы можем выбирать любой календарь из

доступных.

Шаблон ивента имеет список доступных календарей и имеет сохраненный

выбранный календарь.

SPS-127: STATE MACHINE

в колонке В процессе

Уведомления

© Подписаться

Описание Изменить

Нам необходимо изменить имплементацию работы со статусами транзакции
таким образом, чтобы этот процесс выполнялся через Spring State Machine.

€ Spring Statemachine
Цель:

Повысить надежность и безопасность работы системы в контексте работы С
транзакциями.
SHORTENING API TASK

в колонке В процессе

Уведомления

© Подписаться

Описание Изменить

Разработка URL Shortening АР!
Описание:

Требуется разработать АР! для сервиса сокращения URL, аналогичного
TinyURL или ВМ. Этот сервис позволяет пользователям сокращать длинные
URL и получать короткие ссылки, которые могут быть использованы для
перехода к оригинальному длинному URL. Пользователи могут также
выбирать кастомные короткие URL и настраивать время их действия.

Функциональные требования:

Пользователь вводит длинный ЦВЕ в систему, и система возвращает короткий
URL.

Клиент, посетивший короткий URL, должен быть перенаправлен на
оригинальный длинный URL.

Регистрация аккаунта пользователя

Установка видимости короткого URL (кто может воспользоваться ссылкой)

Короткий URL должен быть читаемым.

Короткий URL должен быть безопасным от коллизий.

Короткий URL должен быть непредсказуемым.

Клиент должен иметь возможность выбрать кастомный короткий URL.
Короткий URL должен быть пригодным для веб-поисковых систем (SEO).
Короткий URL должен поддерживать аналитику (не в реальном времени),
такую как количество перенаправлений с короткого URL.

Клиент может опционально устанавливать срок действия короткого URL.

Нефункциональные требования:

Высокая доступность.
Низкая задержка.

Высокая масштабируемость.
Надежность.

Устойчивость к отказам.
Технологии:

Java 21
Spring Web
Spring JPA
Redis
ElasticSearch

Примечания:

Данные о пользователях должны храниться в ElasticSearch
Долговременно данные о ссылках хранятся в ElasticSearch
Дополнительные технологии могут быть использованы по мере
необходимости.

Важно обеспечить совместимость с высокими нагрузками и обработку
большого объема данных при масштабировании системы.
INFO: целевая архитектура

в колонке Нужно сделать

Участники Уведомления

Е cP © Подписаться

Описание Изменить

Все общие классы (на текущий момент - ОТО, классы стартера и тестов)
должны быть добавлены в соттоп:

https://gitlab.leantech.ai/javateam2/common

Все внутренние сервисы находятся внутри закрытого контура и не имеют
доступа к внешнему миру.

(individuals-api)office-api - имеет доступ к внешнему миру и будет иметь
логику аутентификации/авторизации (через KeyCloak). Он будет
оркестратором всем запросов от “актора”.

‘Admin

Méderaior

ca
Client
dividual
Merchant)

«Бы sores
Ince areca

N Га

\ нок |
`— backotice | (Logsionitorinl
| operatiansy Го oO | Natiteatbons)
/

= mobile-otice

AWS RDS AWS ROS
„ (PRIMARY) — (READ-ONLY.
REPLICA)

AWSALB |) AWS Cogito
(Load balancer) (OAuth proviger)
—

AWS 505
(message broker)

_ \ .
В о Tt Hi |
c= J

Parner
‘Application

Payment
provider(s)
